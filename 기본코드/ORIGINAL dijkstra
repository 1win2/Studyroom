import sys
input = sys.stdin.readline
INF=int(1e9)

#노드의 개수, 간선의 개수를 입력받기
n,m=map(int, input().split())
#시작 노드번호 입력
start= int(input())
#연결된 노드 정보리스트
graph=[[] for i in range(n+1)]
# 연결여부 체크리스트
visited=[False]*(n+1)
#거리를 무한대로 초기화
distance=[INF]*(n+1)

#간선 정보 입력받기
for _ in range(m):
    a,b,c=map(int,input().split())
    ##a에서 b로 가는 비용이 c
    graph[a].append((b,c))

#비방문 노드중 최단거리노드 번호 반환함수
def get_smallest_node():
    min_value=INF
    index=0
    for i in range(1,n+1):
        if distance[i]<min_value and not visited[i]:
            min_value=distance[i]
            index=i
    return index

def dijkstra(start):
    #시작노드에 대해서 거리 초기화
    distance[start]=0
    visited[start]=True
    for j in graph[start]:
        distance[j[0]]=j[1] ##b까지의 거리 값= c 넣기

    #시작 노드를 제외한 전체 n-1개의 노드에 대해 반복
    for i in range(n-1):
        #현재 최소거리인 노드를 꺼내서 방문처리
        now=get_smallest_node() #최단거리노드 인덱스
        visited[now]=True #최단거리노드에 방문
        #현재 노드와 연결된 다른 노드 확인
        for j in graph[now]:#방문한 지점과 연결된 노드들 : j
            cost=distance[now]+j[1] #시작점으로부터 방문노드(최단거리노드)까지 거리 + 연결노드까지 거리
            #현재노드 거쳐서 다른노드로 이동하는거리가 더 짧은경우 거리입력
            if cost<distance[j[0]]:
                distance[j[0]]=cost

dijkstra(start) #다익스트라 알고리즘 수행

#모든 노드로 가기 위한 최단 거리를 출력
for i in range(1,n+1):
    #도달 불가한 경우 무한 출력
    if distance[i]==INF :
        print("INFINITY")
    else :
        print(distance[i])
