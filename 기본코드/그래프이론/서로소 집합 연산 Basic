def find_parent(parent, x):
    #루트노드 찾을 때 까지 재귀호출
    if parent[x] != x :
        return find_parent(parent, parent[x])
    return x

#경로압축 find : 루트노드 찾으면서 부모테이블을 갱신하므로 시간복잡도 개선
def find_parent_pathcompression(parent, x):
    if parent[x] != x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]
    

#합치기
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b :
        parent[b] = a
    else:
        parent[a] = b

#노드의 개수와 간선의 개수 입력받기
v, e = map(int, input().split())
parent = [0] * (v+1) #부모 테이블 초기화

#부모 테이블에서 자신의 노드번호로 초기화
for i in range(1, v+1):
    parent[i]=i
    
#union 연산 
for i in range(e):
    a, b = map(int, input().split())
    union_parent(parent, a, b)
